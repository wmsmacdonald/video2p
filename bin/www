#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('peer-chat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// websocket server
var WebSocketServer = require('ws').Server;

var wss = new WebSocketServer({port: 3434});


var seeders = [];
var leechers = {};

var util = require('util');

wss.on('connection', function(ws) {
  ws.on('message', function(message) {
    message = JSON.parse(message);
    console.log('message');
    // is peer signaling message
    if (message.signaling) {
      handleSignal(ws, message);
    }
    else if (message.seeder) {
      seeders.push(ws);
    }
    else if (message.askForSource) {
      console.log("askforsource");
      sourceAnswer(ws);
    }
    else {
      console.log("Unrecognized message. " + JSON.stringify(message));
    }
  });

  ws.on('close', function close() {
    delete seeders[ws.id];
  });
});

function sourceAnswer(ws) {
  if (Object.keys(seeders).length == 0) {
    ws.send(JSON.stringify({ server: true }));
  }
  else {
    var seeder = seeders.pop();
    leechers.push(ws);
    // linking seeder with leecher
    seeder.peer = ws;
    ws.peer = seeder;
    ws.send({ beginPeerConnection: true });
    seeder.send({ beginPeerConnection: true });
  }
}

function handleSignal(ws, message) {
  console.log('received: %s', message);
  ws.peer.send(message);
}